/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package advancedprogramming;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.text.BadLocationException;

/**
 *
 * @author dm5376y
 */
public class MainScreen extends javax.swing.JFrame {

    String ID = "";
    String ListPort = "";
    String ConAddr = "";

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        SendText.setVisible(false);
        input.setEditable(true);
    }

// Very simple multithreaded server that spins a thread
// for each client connection.
    class HandleConnection extends Thread {

        Socket s = null;

        public HandleConnection(Socket s, JTextArea MainDisplay) {
            this.s = s;
        }

        public void run() {
            display.append("Connected!\n");
            try {
                InputStream is = s.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(is));
                String str = br.readLine();
                while (str != null) {
                    display.append(currTime() + ID + " : " + str + "\n");
                    str = br.readLine();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
            display.append("Disconnected!\n");
        } // end of run()
    }

    class MultiThreadedServer extends Thread {

        private JTextArea display;

        public MultiThreadedServer(JTextArea display) {
            this.display = display;
        }

        public void run() {
            display.append("Connecting...\n");
            try {
                // wait for a client connection
                ServerSocket ss = new ServerSocket(2000);
                // then a spin off a thread to handle it
                while (true) {
                    Socket mySocket = ss.accept();
                    HandleConnection hc = new HandleConnection(mySocket, display);
                    hc.start();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
            display.append("Server closing\n");
        }
    }

    public class ServerAdminMultiThread extends JFrame implements ActionListener {

        private Thread theServer = new MultiThreadedServer(display);

        public ServerAdminMultiThread() {

        }

        public void actionPerformed(ActionEvent event) {
        }

    }
    private PrintWriter pw;
    private Socket ss;

    public void contactServer() {
        try {
            ss = new Socket("127.0.0.1", 2000);
            OutputStream os = ss.getOutputStream();
            pw = new PrintWriter(os, true);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public void sendText() {
        int inputLines = input.getLineCount();
        try {
            for (int i = 0; i < inputLines; i++) {
                int start = input.getLineStartOffset(i);
                int end = input.getLineEndOffset(i);
                pw.print(input.getText(start, end - start));
            }
            pw.println();
        } catch (BadLocationException ble) {
            ble.printStackTrace();
        }
    }

    public void closeConnection() {
        try {
            if (ss != null) {
                ss.close();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Onliners = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        ServerInfo = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        uniqueId = new javax.swing.JLabel();
        SendText = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        display.setEditable(false);
        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        Onliners.setEditable(false);
        Onliners.setColumns(1);
        Onliners.setRows(5);
        Onliners.setText("Online Members");
        jScrollPane3.setViewportView(Onliners);

        ServerInfo.setEditable(false);
        ServerInfo.setColumns(1);
        ServerInfo.setRows(5);
        ServerInfo.setText("Host");
        jScrollPane4.setViewportView(ServerInfo);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        uniqueId.setText("Unique ID");
        uniqueId.setRequestFocusEnabled(false);
        uniqueId.setVerifyInputWhenFocusTarget(false);

        SendText.setText("Send");
        SendText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendTextActionPerformed(evt);
            }
        });

        input.setColumns(20);
        input.setRows(5);
        jScrollPane2.setViewportView(input);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(uniqueId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SendText)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(uniqueId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendText))
                .addGap(32, 32, 32))
        );

        uniqueId.getAccessibleContext().setAccessibleName("uniqueIdLabel");
        uniqueId.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // connect button to show connect screen and remove button
        new Conscreen().setVisible(true);
        connectButton.setVisible(false);
        dispose();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void SendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendTextActionPerformed
        sendText();
    }//GEN-LAST:event_SendTextActionPerformed

    //Function to set the unique id.
    public void setUniqueId(String uId) {
        uniqueId.setText(uId);
        ID = uId;
    }
    
    //Activates and allows for the use of sending text.
    public void activateSendButton(){
        SendText.setVisible(true);
        connectButton.setVisible(false);
        input.setEditable(true);
        currTime();
    }
    
    //Function to create a new thread and connect to the server.
    public void connectServer(){
        Thread theServer = new MultiThreadedServer(display);
        theServer.start();
        contactServer();
    }
    
    //Function to get the current time.
    public String currTime() {
        SimpleDateFormat formatter= new SimpleDateFormat( "[HH:mm:ss] ");
        Date date = new Date(System.currentTimeMillis());
        return formatter.format(date);
        }
    

    public void setlisteningPort(String ListPort) {
        System.out.println(ListPort);
    }

    public void setConAddress(String ConAddr) {
        System.out.println(ConAddr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Onliners;
    private javax.swing.JButton SendText;
    private javax.swing.JTextArea ServerInfo;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextArea display;
    private javax.swing.JTextArea input;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JLabel uniqueId;
    // End of variables declaration//GEN-END:variables
}
